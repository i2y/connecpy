# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: example/edition_features_test.proto

from typing import Iterable, Optional, Protocol, Union

import httpx

from connecpy.client import ConnecpyClient, ConnecpyClientSync, RequestHeaders
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    ServerInterceptor,
    ServiceContext,
)
import example.edition_features_test_pb2 as example_dot_edition__features__test__pb2


class EditionTestService(Protocol):
    async def TestFeatures(
        self,
        req: example_dot_edition__features__test__pb2.FeatureTestRequest,
        ctx: ServiceContext,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def GetFeatures(
        self,
        req: example_dot_edition__features__test__pb2.FeatureTestRequest,
        ctx: ServiceContext,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class EditionTestServiceASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: EditionTestService,
        *,
        interceptors: Iterable[ServerInterceptor] = (),
        max_receive_message_length=1024 * 100 * 100,
    ):
        super().__init__(
            path="/test.editions.EditionTestService",
            endpoints={
                "/test.editions.EditionTestService/TestFeatures": Endpoint[
                    example_dot_edition__features__test__pb2.FeatureTestRequest,
                    example_dot_edition__features__test__pb2.FeatureTestResponse,
                ](
                    service_name="EditionTestService",
                    name="TestFeatures",
                    function=getattr(service, "TestFeatures"),
                    input=example_dot_edition__features__test__pb2.FeatureTestRequest,
                    output=example_dot_edition__features__test__pb2.FeatureTestResponse,
                    allowed_methods=("POST",),
                ),
                "/test.editions.EditionTestService/GetFeatures": Endpoint[
                    example_dot_edition__features__test__pb2.FeatureTestRequest,
                    example_dot_edition__features__test__pb2.FeatureTestResponse,
                ](
                    service_name="EditionTestService",
                    name="GetFeatures",
                    function=getattr(service, "GetFeatures"),
                    input=example_dot_edition__features__test__pb2.FeatureTestRequest,
                    output=example_dot_edition__features__test__pb2.FeatureTestResponse,
                    allowed_methods=("GET", "POST"),
                ),
            },
            interceptors=interceptors,
            max_receive_message_length=max_receive_message_length,
        )

    @property
    def service_name(self):
        return "test.editions.EditionTestService"


class EditionTestServiceClient(ConnecpyClient):
    async def TestFeatures(
        self,
        request: example_dot_edition__features__test__pb2.FeatureTestRequest,
        *,
        headers: Optional[RequestHeaders] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/test.editions.EditionTestService/TestFeatures",
            method=method,
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_edition__features__test__pb2.FeatureTestResponse,
            session=session,
        )

    async def GetFeatures(
        self,
        request: example_dot_edition__features__test__pb2.FeatureTestRequest,
        *,
        headers: Optional[RequestHeaders] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        use_get: bool = False,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        method = "GET" if use_get else "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/test.editions.EditionTestService/GetFeatures",
            method=method,
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_edition__features__test__pb2.FeatureTestResponse,
            session=session,
        )


class EditionTestServiceSync(Protocol):
    def TestFeatures(
        self,
        req: example_dot_edition__features__test__pb2.FeatureTestRequest,
        ctx: ServiceContext,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def GetFeatures(
        self,
        req: example_dot_edition__features__test__pb2.FeatureTestRequest,
        ctx: ServiceContext,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class EditionTestServiceWSGIApplication(ConnecpyWSGIApplication):
    def __init__(self, service: EditionTestServiceSync):
        super().__init__(
            path="/test.editions.EditionTestService",
            endpoints={
                "/test.editions.EditionTestService/TestFeatures": Endpoint[
                    example_dot_edition__features__test__pb2.FeatureTestRequest,
                    example_dot_edition__features__test__pb2.FeatureTestResponse,
                ](
                    service_name="EditionTestService",
                    name="TestFeatures",
                    function=getattr(service, "TestFeatures"),
                    input=example_dot_edition__features__test__pb2.FeatureTestRequest,
                    output=example_dot_edition__features__test__pb2.FeatureTestResponse,
                    allowed_methods=("POST",),
                ),
                "/test.editions.EditionTestService/GetFeatures": Endpoint[
                    example_dot_edition__features__test__pb2.FeatureTestRequest,
                    example_dot_edition__features__test__pb2.FeatureTestResponse,
                ](
                    service_name="EditionTestService",
                    name="GetFeatures",
                    function=getattr(service, "GetFeatures"),
                    input=example_dot_edition__features__test__pb2.FeatureTestRequest,
                    output=example_dot_edition__features__test__pb2.FeatureTestResponse,
                    allowed_methods=("GET", "POST"),
                ),
            },
        )

    @property
    def service_name(self):
        return "test.editions.EditionTestService"


class EditionTestServiceClientSync(ConnecpyClientSync):
    def TestFeatures(
        self,
        request: example_dot_edition__features__test__pb2.FeatureTestRequest,
        *,
        headers: Optional[RequestHeaders] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/test.editions.EditionTestService/TestFeatures",
            method=method,
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=example_dot_edition__features__test__pb2.FeatureTestResponse,
        )

    def GetFeatures(
        self,
        request: example_dot_edition__features__test__pb2.FeatureTestRequest,
        *,
        headers: Optional[RequestHeaders] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        use_get: bool = False,
    ) -> example_dot_edition__features__test__pb2.FeatureTestResponse:
        method = "GET" if use_get else "POST"
        return self._make_request(
            url=f"{server_path_prefix}/test.editions.EditionTestService/GetFeatures",
            method=method,
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=example_dot_edition__features__test__pb2.FeatureTestResponse,
        )
