# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: example/haberdasher_edition_2023.proto

from typing import Iterable, Mapping, Protocol

from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)
import example.haberdasher_edition_2023_pb2 as example_dot_haberdasher__edition__2023__pb2


class Haberdasher(Protocol):
    async def MakeHat(
        self, req: example_dot_haberdasher__edition__2023__pb2.Size, ctx: RequestContext
    ) -> example_dot_haberdasher__edition__2023__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: Haberdasher,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ):
        super().__init__(
            endpoints={
                "/i2y.connecpy.example2023.Haberdasher/MakeHat": Endpoint.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example2023.Haberdasher",
                        input=example_dot_haberdasher__edition__2023__pb2.Size,
                        output=example_dot_haberdasher__edition__2023__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeHat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example2023.Haberdasher"


class HaberdasherClient(ConnecpyClient):
    async def MakeHat(
        self,
        request: example_dot_haberdasher__edition__2023__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__edition__2023__pb2.Hat:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=example_dot_haberdasher__edition__2023__pb2.Size,
                output=example_dot_haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )


class HaberdasherSync(Protocol):
    def MakeHat(
        self, req: example_dot_haberdasher__edition__2023__pb2.Size, ctx: RequestContext
    ) -> example_dot_haberdasher__edition__2023__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: HaberdasherSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ):
        super().__init__(
            endpoints={
                "/i2y.connecpy.example2023.Haberdasher/MakeHat": EndpointSync.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example2023.Haberdasher",
                        input=example_dot_haberdasher__edition__2023__pb2.Size,
                        output=example_dot_haberdasher__edition__2023__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeHat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example2023.Haberdasher"


class HaberdasherClientSync(ConnecpyClientSync):
    def MakeHat(
        self,
        request: example_dot_haberdasher__edition__2023__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__edition__2023__pb2.Hat:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=example_dot_haberdasher__edition__2023__pb2.Size,
                output=example_dot_haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )
