# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: example/haberdasher.proto

import importlib
from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Any, ClassVar, Protocol

import google.protobuf.empty_pb2 as google_dot_protobuf_dot_empty__pb2
from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)

import example.haberdasher_pb2 as example_dot_haberdasher__pb2


class Haberdasher(Protocol):
    """Service protocol for Haberdasher."""

    _service_info: ClassVar[dict] = {
        "name": "i2y.connecpy.example.Haberdasher",
        "methods": {
            "make_hat": MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            "make_flexible_hat": MethodInfo(
                name="MakeFlexibleHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "make_similar_hats": MethodInfo(
                name="MakeSimilarHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            "make_various_hats": MethodInfo(
                name="MakeVariousHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "list_parts": MethodInfo(
                name="ListParts",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=example_dot_haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "do_nothing": MethodInfo(
                name="DoNothing",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
        },
    }

    async def make_hat(
        self, request: example_dot_haberdasher__pb2.Size, ctx: RequestContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def make_flexible_hat(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        ctx: RequestContext,
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def make_similar_hats(
        self, request: example_dot_haberdasher__pb2.Size, ctx: RequestContext
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def make_various_hats(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        ctx: RequestContext,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def list_parts(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat.Part]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def do_nothing(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: Haberdasher,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": Endpoint.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat": Endpoint.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_flexible_hat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeSimilarHats": Endpoint.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_similar_hats,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeVariousHats": Endpoint.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_various_hats,
                ),
                "/i2y.connecpy.example.Haberdasher/ListParts": Endpoint.server_stream(
                    method=MethodInfo(
                        name="ListParts",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=example_dot_haberdasher__pb2.Hat.Part,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_parts,
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": Endpoint.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.do_nothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example.Haberdasher"


class HaberdasherClient(ConnecpyClient):
    async def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    async def make_flexible_hat(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        return await self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="MakeFlexibleHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="MakeSimilarHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_various_hats(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="MakeVariousHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat.Part]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ListParts",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=example_dot_haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DoNothing",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class HaberdasherSync(Protocol):
    """Synchronous service protocol for Haberdasher."""

    _service_info: ClassVar[dict] = {
        "name": "i2y.connecpy.example.Haberdasher",
        "methods": {
            "make_hat": MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            "make_flexible_hat": MethodInfo(
                name="MakeFlexibleHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "make_similar_hats": MethodInfo(
                name="MakeSimilarHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            "make_various_hats": MethodInfo(
                name="MakeVariousHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "list_parts": MethodInfo(
                name="ListParts",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=example_dot_haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            "do_nothing": MethodInfo(
                name="DoNothing",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
        },
    }

    def make_hat(
        self, request: example_dot_haberdasher__pb2.Size, ctx: RequestContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def make_flexible_hat(
        self, request: Iterator[example_dot_haberdasher__pb2.Size], ctx: RequestContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def make_similar_hats(
        self, request: example_dot_haberdasher__pb2.Size, ctx: RequestContext
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def make_various_hats(
        self, request: Iterator[example_dot_haberdasher__pb2.Size], ctx: RequestContext
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def list_parts(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> Iterator[example_dot_haberdasher__pb2.Hat.Part]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def do_nothing(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: HaberdasherSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": EndpointSync.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat": EndpointSync.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_flexible_hat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeSimilarHats": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_similar_hats,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeVariousHats": EndpointSync.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_various_hats,
                ),
                "/i2y.connecpy.example.Haberdasher/ListParts": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="ListParts",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=example_dot_haberdasher__pb2.Hat.Part,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_parts,
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": EndpointSync.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="i2y.connecpy.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.do_nothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example.Haberdasher"


class HaberdasherClientSync(ConnecpyClientSync):
    def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    def make_flexible_hat(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        return self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="MakeFlexibleHat",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="MakeSimilarHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_various_hats(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="MakeVariousHats",
                service_name="i2y.connecpy.example.Haberdasher",
                input=example_dot_haberdasher__pb2.Size,
                output=example_dot_haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat.Part]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ListParts",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=example_dot_haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DoNothing",
                service_name="i2y.connecpy.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


# Client Protocol types for type-safe transport API
class HaberdasherClientProtocol(Protocol):
    """Protocol defining the client interface for Haberdasher."""

    async def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat: ...
    async def make_flexible_hat(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat: ...
    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]: ...
    def make_various_hats(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]: ...
    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat.Part]: ...
    async def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty: ...


class HaberdasherClientSyncProtocol(Protocol):
    """Protocol defining the synchronous client interface for Haberdasher."""

    def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat: ...
    def make_flexible_hat(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat: ...
    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]: ...
    def make_various_hats(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]: ...
    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat.Part]: ...
    def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty: ...


class HaberdasherGrpcWrapper:
    """Async gRPC stub wrapper implementing HaberdasherClientProtocol."""

    def __init__(self, stub: Any) -> None:
        """Initialize with a gRPC async stub."""
        self._stub = stub

    async def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        """Call MakeHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Unary - await the result
        return await self._stub.MakeHat(request, metadata=metadata, timeout=timeout)

    async def make_flexible_hat(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        """Call MakeFlexibleHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Client streaming or bidi streaming
        # Client streaming - await the result
        return await self._stub.MakeFlexibleHat(
            request, metadata=metadata, timeout=timeout
        )

    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        """Call MakeSimilarHats via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Server streaming - return the stream directly
        return self._stub.MakeSimilarHats(request, metadata=metadata, timeout=timeout)

    def make_various_hats(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        """Call MakeVariousHats via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Client streaming or bidi streaming
        # Bidi streaming - return the stream directly
        return self._stub.MakeVariousHats(request, metadata=metadata, timeout=timeout)

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat.Part]:
        """Call ListParts via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Server streaming - return the stream directly
        return self._stub.ListParts(request, metadata=metadata, timeout=timeout)

    async def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        """Call DoNothing via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Unary - await the result
        return await self._stub.DoNothing(request, metadata=metadata, timeout=timeout)


class HaberdasherGrpcWrapperSync:
    """Sync gRPC stub wrapper implementing HaberdasherClientSyncProtocol."""

    def __init__(self, stub: Any) -> None:
        """Initialize with a gRPC sync stub."""
        self._stub = stub

    def make_hat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        """Call MakeHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.MakeHat(request, metadata=metadata, timeout=timeout)

    def make_flexible_hat(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        """Call MakeFlexibleHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.MakeFlexibleHat(request, metadata=metadata, timeout=timeout)

    def make_similar_hats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        """Call MakeSimilarHats via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.MakeSimilarHats(request, metadata=metadata, timeout=timeout)

    def make_various_hats(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        """Call MakeVariousHats via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.MakeVariousHats(request, metadata=metadata, timeout=timeout)

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_haberdasher__pb2.Hat.Part]:
        """Call ListParts via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.ListParts(request, metadata=metadata, timeout=timeout)

    def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        """Call DoNothing via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.DoNothing(request, metadata=metadata, timeout=timeout)


def create_client(
    transport: Any,  # Union[ConnectTransportAsync, GrpcTransportAsync]
) -> HaberdasherClientProtocol:
    """Create an async Haberdasher client with the specified transport.

    Args:
        transport: The transport to use (ConnectTransportAsync or GrpcTransportAsync)

    Returns:
        A client implementing HaberdasherClientProtocol
    """
    # Avoid circular imports by importing here
    from connecpy.transport.connect_async import ConnectTransportAsync  # noqa: PLC0415
    from connecpy.transport.grpc_async import GrpcTransportAsync  # noqa: PLC0415

    if isinstance(transport, ConnectTransportAsync):
        return HaberdasherClient(
            address=transport.address,
            proto_json=transport.proto_json,
            accept_compression=transport.accept_compression,
            send_compression=transport.send_compression,
            timeout_ms=transport.timeout_ms,
            read_max_bytes=transport.read_max_bytes,
            interceptors=transport.interceptors,
            session=transport.session,
        )
    if isinstance(transport, GrpcTransportAsync):
        # Import grpc stub
        module_parts = __name__.split(".")
        if module_parts[-1].endswith("_connecpy"):
            base_name = module_parts[-1][:-9]  # Remove "_connecpy"
            module_parts[-1] = f"{base_name}_pb2_grpc"
            grpc_module_name = ".".join(module_parts)
        else:
            grpc_module_name = f"{__name__}_pb2_grpc"

        grpc_mod = importlib.import_module(grpc_module_name)
        stub_class = getattr(grpc_mod, "HaberdasherStub")  # noqa: B009
        stub = stub_class(transport._channel)  # noqa: SLF001
        return HaberdasherGrpcWrapper(stub)

    error_msg = f"Unsupported transport type: {type(transport)}"
    raise TypeError(error_msg)


def create_client_sync(
    transport: Any,  # Union[ConnectTransport, GrpcTransport]
) -> HaberdasherClientSyncProtocol:
    """Create a sync Haberdasher client with the specified transport.

    Args:
        transport: The transport to use (ConnectTransport or GrpcTransport)

    Returns:
        A client implementing HaberdasherClientSyncProtocol
    """
    # Avoid circular imports by importing here
    from connecpy.transport.connect import ConnectTransport  # noqa: PLC0415
    from connecpy.transport.grpc import GrpcTransport  # noqa: PLC0415

    if isinstance(transport, ConnectTransport):
        return HaberdasherClientSync(
            address=transport.address,
            proto_json=transport.proto_json,
            accept_compression=transport.accept_compression,
            send_compression=transport.send_compression,
            timeout_ms=transport.timeout_ms,
            read_max_bytes=transport.read_max_bytes,
            interceptors=transport.interceptors,
            session=transport.session,
        )
    if isinstance(transport, GrpcTransport):
        # Import grpc stub
        module_parts = __name__.split(".")
        if module_parts[-1].endswith("_connecpy"):
            base_name = module_parts[-1][:-9]  # Remove "_connecpy"
            module_parts[-1] = f"{base_name}_pb2_grpc"
            grpc_module_name = ".".join(module_parts)
        else:
            grpc_module_name = f"{__name__}_pb2_grpc"

        grpc_mod = importlib.import_module(grpc_module_name)
        stub_class = getattr(grpc_mod, "HaberdasherStub")  # noqa: B009
        stub = stub_class(transport._channel)  # noqa: SLF001
        return HaberdasherGrpcWrapperSync(stub)

    error_msg = f"Unsupported transport type: {type(transport)}"
    raise TypeError(error_msg)
