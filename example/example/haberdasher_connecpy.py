# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: example/haberdasher.proto

from typing import AsyncIterator, Iterable, Iterator, Mapping, Protocol

from connecpy.client import (
    ConnecpyClient,
    ConnecpyClientSync,
    ResponseStream,
    ResponseStreamSync,
)
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.headers import Headers
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
    ServiceContext,
)
import example.haberdasher_pb2 as example_dot_haberdasher__pb2
import google.protobuf.empty_pb2 as google_dot_protobuf_dot_empty__pb2


class Haberdasher(Protocol):
    async def MakeHat(
        self, req: example_dot_haberdasher__pb2.Size, ctx: ServiceContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def MakeFlexibleHat(
        self, req: AsyncIterator[example_dot_haberdasher__pb2.Size], ctx: ServiceContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def MakeSimilarHats(
        self, req: example_dot_haberdasher__pb2.Size, ctx: ServiceContext
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def MakeVariousHats(
        self, req: AsyncIterator[example_dot_haberdasher__pb2.Size], ctx: ServiceContext
    ) -> AsyncIterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def DoNothing(
        self, req: google_dot_protobuf_dot_empty__pb2.Empty, ctx: ServiceContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: Haberdasher,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ):
        super().__init__(
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": Endpoint.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeHat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat": Endpoint.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.MakeFlexibleHat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeSimilarHats": Endpoint.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeSimilarHats,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeVariousHats": Endpoint.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.MakeVariousHats,
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": Endpoint.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.DoNothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example.Haberdasher"


class HaberdasherClient(ConnecpyClient):
    async def MakeHat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        return await self._make_request(
            url="/i2y.connecpy.example.Haberdasher/MakeHat",
            method="GET" if use_get else "POST",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )

    async def MakeFlexibleHat(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        res = await self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeFlexibleHat",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return await self._consume_single_response(res)

    async def MakeSimilarHats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> ResponseStream[example_dot_haberdasher__pb2.Hat]:
        res = await self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeSimilarHats",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return res

    async def MakeVariousHats(
        self,
        request: AsyncIterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> ResponseStream[example_dot_haberdasher__pb2.Hat]:
        res = await self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeVariousHats",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return res

    async def DoNothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return await self._make_request(
            url="/i2y.connecpy.example.Haberdasher/DoNothing",
            method="POST",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=google_dot_protobuf_dot_empty__pb2.Empty,
        )


class HaberdasherSync(Protocol):
    def MakeHat(
        self, req: example_dot_haberdasher__pb2.Size, ctx: ServiceContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def MakeFlexibleHat(
        self, req: Iterator[example_dot_haberdasher__pb2.Size], ctx: ServiceContext
    ) -> example_dot_haberdasher__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def MakeSimilarHats(
        self, req: example_dot_haberdasher__pb2.Size, ctx: ServiceContext
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def MakeVariousHats(
        self, req: Iterator[example_dot_haberdasher__pb2.Size], ctx: ServiceContext
    ) -> Iterator[example_dot_haberdasher__pb2.Hat]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def DoNothing(
        self, req: google_dot_protobuf_dot_empty__pb2.Empty, ctx: ServiceContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: HaberdasherSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ):
        super().__init__(
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": EndpointSync.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeHat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat": EndpointSync.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.MakeFlexibleHat,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeSimilarHats": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.MakeSimilarHats,
                ),
                "/i2y.connecpy.example.Haberdasher/MakeVariousHats": EndpointSync.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="Haberdasher",
                        input=example_dot_haberdasher__pb2.Size,
                        output=example_dot_haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.MakeVariousHats,
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": EndpointSync.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.DoNothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example.Haberdasher"


class HaberdasherClientSync(ConnecpyClientSync):
    def MakeHat(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_haberdasher__pb2.Hat:
        return self._make_request(
            url="/i2y.connecpy.example.Haberdasher/MakeHat",
            method="GET" if use_get else "POST",
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=example_dot_haberdasher__pb2.Hat,
        )

    def MakeFlexibleHat(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> example_dot_haberdasher__pb2.Hat:
        res = self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeFlexibleHat",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return self._consume_single_response(res)

    def MakeSimilarHats(
        self,
        request: example_dot_haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> ResponseStreamSync[example_dot_haberdasher__pb2.Hat]:
        res = self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeSimilarHats",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return res

    def MakeVariousHats(
        self,
        request: Iterator[example_dot_haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> ResponseStreamSync[example_dot_haberdasher__pb2.Hat]:
        res = self._make_request_stream(
            url="/i2y.connecpy.example.Haberdasher/MakeVariousHats",
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=example_dot_haberdasher__pb2.Hat,
        )
        return res

    def DoNothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return self._make_request(
            url="/i2y.connecpy.example.Haberdasher/DoNothing",
            method="POST",
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=google_dot_protobuf_dot_empty__pb2.Empty,
        )
