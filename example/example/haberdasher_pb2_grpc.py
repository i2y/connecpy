# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

from example import haberdasher_pb2 as example_dot_haberdasher__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        f" but the generated code in example/haberdasher_pb2_grpc.py depends on"
        f" grpcio>={GRPC_GENERATED_VERSION}."
        f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class HaberdasherStub:
    """A Haberdasher makes hats for clients."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakeHat = channel.unary_unary(
            "/i2y.connecpy.example.Haberdasher/MakeHat",
            request_serializer=example_dot_haberdasher__pb2.Size.SerializeToString,
            response_deserializer=example_dot_haberdasher__pb2.Hat.FromString,
            _registered_method=True,
        )
        self.MakeFlexibleHat = channel.stream_unary(
            "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat",
            request_serializer=example_dot_haberdasher__pb2.Size.SerializeToString,
            response_deserializer=example_dot_haberdasher__pb2.Hat.FromString,
            _registered_method=True,
        )
        self.MakeSimilarHats = channel.unary_stream(
            "/i2y.connecpy.example.Haberdasher/MakeSimilarHats",
            request_serializer=example_dot_haberdasher__pb2.Size.SerializeToString,
            response_deserializer=example_dot_haberdasher__pb2.Hat.FromString,
            _registered_method=True,
        )
        self.MakeVariousHats = channel.stream_stream(
            "/i2y.connecpy.example.Haberdasher/MakeVariousHats",
            request_serializer=example_dot_haberdasher__pb2.Size.SerializeToString,
            response_deserializer=example_dot_haberdasher__pb2.Hat.FromString,
            _registered_method=True,
        )
        self.ListParts = channel.unary_stream(
            "/i2y.connecpy.example.Haberdasher/ListParts",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=example_dot_haberdasher__pb2.Hat.Part.FromString,
            _registered_method=True,
        )
        self.DoNothing = channel.unary_unary(
            "/i2y.connecpy.example.Haberdasher/DoNothing",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            _registered_method=True,
        )


class HaberdasherServicer:
    """A Haberdasher makes hats for clients."""

    def MakeHat(self, request, context):
        """MakeHat produces a hat of mysterious, randomly-selected color!"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MakeFlexibleHat(self, request_iterator, context):
        """MakeFlexibleHats produces a single hat adhering to many sizes."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MakeSimilarHats(self, request, context):
        """MakeSimilarHats produces hats of mysterious, randomly-selected color following a single order!"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MakeVariousHats(self, request_iterator, context):
        """MakeVariousHats produces hats of mysterious, randomly-selected color following many orders!"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListParts(self, request, context):
        """ListParts lists available parts for making a hat."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DoNothing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_HaberdasherServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "MakeHat": grpc.unary_unary_rpc_method_handler(
            servicer.MakeHat,
            request_deserializer=example_dot_haberdasher__pb2.Size.FromString,
            response_serializer=example_dot_haberdasher__pb2.Hat.SerializeToString,
        ),
        "MakeFlexibleHat": grpc.stream_unary_rpc_method_handler(
            servicer.MakeFlexibleHat,
            request_deserializer=example_dot_haberdasher__pb2.Size.FromString,
            response_serializer=example_dot_haberdasher__pb2.Hat.SerializeToString,
        ),
        "MakeSimilarHats": grpc.unary_stream_rpc_method_handler(
            servicer.MakeSimilarHats,
            request_deserializer=example_dot_haberdasher__pb2.Size.FromString,
            response_serializer=example_dot_haberdasher__pb2.Hat.SerializeToString,
        ),
        "MakeVariousHats": grpc.stream_stream_rpc_method_handler(
            servicer.MakeVariousHats,
            request_deserializer=example_dot_haberdasher__pb2.Size.FromString,
            response_serializer=example_dot_haberdasher__pb2.Hat.SerializeToString,
        ),
        "ListParts": grpc.unary_stream_rpc_method_handler(
            servicer.ListParts,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=example_dot_haberdasher__pb2.Hat.Part.SerializeToString,
        ),
        "DoNothing": grpc.unary_unary_rpc_method_handler(
            servicer.DoNothing,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "i2y.connecpy.example.Haberdasher", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "i2y.connecpy.example.Haberdasher", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class Haberdasher:
    """A Haberdasher makes hats for clients."""

    @staticmethod
    def MakeHat(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/i2y.connecpy.example.Haberdasher/MakeHat",
            example_dot_haberdasher__pb2.Size.SerializeToString,
            example_dot_haberdasher__pb2.Hat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def MakeFlexibleHat(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/i2y.connecpy.example.Haberdasher/MakeFlexibleHat",
            example_dot_haberdasher__pb2.Size.SerializeToString,
            example_dot_haberdasher__pb2.Hat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def MakeSimilarHats(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/i2y.connecpy.example.Haberdasher/MakeSimilarHats",
            example_dot_haberdasher__pb2.Size.SerializeToString,
            example_dot_haberdasher__pb2.Hat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def MakeVariousHats(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/i2y.connecpy.example.Haberdasher/MakeVariousHats",
            example_dot_haberdasher__pb2.Size.SerializeToString,
            example_dot_haberdasher__pb2.Hat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListParts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/i2y.connecpy.example.Haberdasher/ListParts",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            example_dot_haberdasher__pb2.Hat.Part.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DoNothing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/i2y.connecpy.example.Haberdasher/DoNothing",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
