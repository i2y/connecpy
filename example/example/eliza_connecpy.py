# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: example/eliza.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)

import example.eliza_pb2 as example_dot_eliza__pb2


class ElizaService(Protocol):
    async def say(
        self, request: example_dot_eliza__pb2.SayRequest, ctx: RequestContext
    ) -> example_dot_eliza__pb2.SayResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def converse(
        self,
        request: AsyncIterator[example_dot_eliza__pb2.ConverseRequest],
        ctx: RequestContext,
    ) -> AsyncIterator[example_dot_eliza__pb2.ConverseResponse]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def introduce(
        self, request: example_dot_eliza__pb2.IntroduceRequest, ctx: RequestContext
    ) -> AsyncIterator[example_dot_eliza__pb2.IntroduceResponse]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class ElizaServiceASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: ElizaService,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.eliza.v1.ElizaService/Say": Endpoint.unary(
                    method=MethodInfo(
                        name="Say",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.SayRequest,
                        output=example_dot_eliza__pb2.SayResponse,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.say,
                ),
                "/connectrpc.eliza.v1.ElizaService/Converse": Endpoint.bidi_stream(
                    method=MethodInfo(
                        name="Converse",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.ConverseRequest,
                        output=example_dot_eliza__pb2.ConverseResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.converse,
                ),
                "/connectrpc.eliza.v1.ElizaService/Introduce": Endpoint.server_stream(
                    method=MethodInfo(
                        name="Introduce",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.IntroduceRequest,
                        output=example_dot_eliza__pb2.IntroduceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.introduce,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.eliza.v1.ElizaService"


class ElizaServiceClient(ConnecpyClient):
    async def say(
        self,
        request: example_dot_eliza__pb2.SayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_eliza__pb2.SayResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Say",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.SayRequest,
                output=example_dot_eliza__pb2.SayResponse,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    def converse(
        self,
        request: AsyncIterator[example_dot_eliza__pb2.ConverseRequest],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_eliza__pb2.ConverseResponse]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="Converse",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.ConverseRequest,
                output=example_dot_eliza__pb2.ConverseResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def introduce(
        self,
        request: example_dot_eliza__pb2.IntroduceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[example_dot_eliza__pb2.IntroduceResponse]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="Introduce",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.IntroduceRequest,
                output=example_dot_eliza__pb2.IntroduceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class ElizaServiceSync(Protocol):
    def say(
        self, request: example_dot_eliza__pb2.SayRequest, ctx: RequestContext
    ) -> example_dot_eliza__pb2.SayResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def converse(
        self,
        request: Iterator[example_dot_eliza__pb2.ConverseRequest],
        ctx: RequestContext,
    ) -> Iterator[example_dot_eliza__pb2.ConverseResponse]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    def introduce(
        self, request: example_dot_eliza__pb2.IntroduceRequest, ctx: RequestContext
    ) -> Iterator[example_dot_eliza__pb2.IntroduceResponse]:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class ElizaServiceWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: ElizaServiceSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.eliza.v1.ElizaService/Say": EndpointSync.unary(
                    method=MethodInfo(
                        name="Say",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.SayRequest,
                        output=example_dot_eliza__pb2.SayResponse,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.say,
                ),
                "/connectrpc.eliza.v1.ElizaService/Converse": EndpointSync.bidi_stream(
                    method=MethodInfo(
                        name="Converse",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.ConverseRequest,
                        output=example_dot_eliza__pb2.ConverseResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.converse,
                ),
                "/connectrpc.eliza.v1.ElizaService/Introduce": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="Introduce",
                        service_name="connectrpc.eliza.v1.ElizaService",
                        input=example_dot_eliza__pb2.IntroduceRequest,
                        output=example_dot_eliza__pb2.IntroduceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.introduce,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.eliza.v1.ElizaService"


class ElizaServiceClientSync(ConnecpyClientSync):
    def say(
        self,
        request: example_dot_eliza__pb2.SayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> example_dot_eliza__pb2.SayResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Say",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.SayRequest,
                output=example_dot_eliza__pb2.SayResponse,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    def converse(
        self,
        request: Iterator[example_dot_eliza__pb2.ConverseRequest],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_eliza__pb2.ConverseResponse]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="Converse",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.ConverseRequest,
                output=example_dot_eliza__pb2.ConverseResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def introduce(
        self,
        request: example_dot_eliza__pb2.IntroduceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[example_dot_eliza__pb2.IntroduceResponse]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="Introduce",
                service_name="connectrpc.eliza.v1.ElizaService",
                input=example_dot_eliza__pb2.IntroduceRequest,
                output=example_dot_eliza__pb2.IntroduceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
