# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: haberdasher_edition_2023.proto

import importlib
from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Any, ClassVar, Protocol
from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)

from . import haberdasher_edition_2023_pb2 as haberdasher__edition__2023__pb2


class Haberdasher(Protocol):
    """Service protocol for Haberdasher."""

    _service_info: ClassVar[dict] = {
        "name": "i2y.connecpy.example2023.Haberdasher",
        "methods": {
            "make_hat": MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=haberdasher__edition__2023__pb2.Size,
                output=haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
        }
    }
    async def make_hat(self, request: haberdasher__edition__2023__pb2.Size, ctx: RequestContext) -> haberdasher__edition__2023__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherASGIApplication(ConnecpyASGIApplication):
    def __init__(self, service: Haberdasher, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/i2y.connecpy.example2023.Haberdasher/MakeHat": Endpoint.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example2023.Haberdasher",
                        input=haberdasher__edition__2023__pb2.Size,
                        output=haberdasher__edition__2023__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example2023.Haberdasher"


class HaberdasherClient(ConnecpyClient):
    async def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=haberdasher__edition__2023__pb2.Size,
                output=haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )


class HaberdasherSync(Protocol):
    """Synchronous service protocol for Haberdasher."""

    _service_info: ClassVar[dict] = {
        "name": "i2y.connecpy.example2023.Haberdasher",
        "methods": {
            "make_hat": MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=haberdasher__edition__2023__pb2.Size,
                output=haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
        }
    }
    def make_hat(self, request: haberdasher__edition__2023__pb2.Size, ctx: RequestContext) -> haberdasher__edition__2023__pb2.Hat:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherWSGIApplication(ConnecpyWSGIApplication):
    def __init__(self, service: HaberdasherSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/i2y.connecpy.example2023.Haberdasher/MakeHat": EndpointSync.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="i2y.connecpy.example2023.Haberdasher",
                        input=haberdasher__edition__2023__pb2.Size,
                        output=haberdasher__edition__2023__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/i2y.connecpy.example2023.Haberdasher"


class HaberdasherClientSync(ConnecpyClientSync):
    def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="i2y.connecpy.example2023.Haberdasher",
                input=haberdasher__edition__2023__pb2.Size,
                output=haberdasher__edition__2023__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )


# Client Protocol types for type-safe transport API
class HaberdasherClientProtocol(Protocol):
    """Protocol defining the client interface for Haberdasher."""
    async def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat: ...


class HaberdasherClientSyncProtocol(Protocol):
    """Protocol defining the synchronous client interface for Haberdasher."""
    def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat: ...


class HaberdasherGrpcWrapper:
    """Async gRPC stub wrapper implementing HaberdasherClientProtocol."""

    def __init__(self, stub: Any) -> None:
        """Initialize with a gRPC async stub."""
        self._stub = stub

    async def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat:
        """Call MakeHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        # Unary - await the result
        return await self._stub.MakeHat(request, metadata=metadata, timeout=timeout)


class HaberdasherGrpcWrapperSync:
    """Sync gRPC stub wrapper implementing HaberdasherClientSyncProtocol."""

    def __init__(self, stub: Any) -> None:
        """Initialize with a gRPC sync stub."""
        self._stub = stub

    def make_hat(
        self,
        request: haberdasher__edition__2023__pb2.Size,
        *,
        headers: Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__edition__2023__pb2.Hat:
        """Call MakeHat via gRPC."""
        metadata = [(k.lower(), v) for k, v in (headers or {}).items()]
        timeout = timeout_ms / 1000.0 if timeout_ms else None
        return self._stub.MakeHat(request, metadata=metadata, timeout=timeout)


def create_client(
    transport: Any,  # Union[ConnectTransportAsync, GrpcTransportAsync]
) -> HaberdasherClientProtocol:
    """Create an async Haberdasher client with the specified transport.

    Args:
        transport: The transport to use (ConnectTransportAsync or GrpcTransportAsync)

    Returns:
        A client implementing HaberdasherClientProtocol
    """
    # Avoid circular imports by importing here
    from connecpy.transport.client.connect_async import ConnectTransportAsync  # noqa: PLC0415, I001
    from connecpy.transport.client.grpc_async import GrpcTransportAsync  # noqa: PLC0415

    if isinstance(transport, ConnectTransportAsync):
        return HaberdasherClient(
            address=transport.address,
            proto_json=transport.proto_json,
            accept_compression=transport.accept_compression,
            send_compression=transport.send_compression,
            timeout_ms=transport.timeout_ms,
            read_max_bytes=transport.read_max_bytes,
            interceptors=transport.interceptors,
            session=transport.session,
        )
    if isinstance(transport, GrpcTransportAsync):
        # Import grpc stub
        module_parts = __name__.split(".")
        if module_parts[-1].endswith("_connecpy"):
            base_name = module_parts[-1][:-9]  # Remove "_connecpy"
            module_parts[-1] = f"{base_name}_pb2_grpc"
            grpc_module_name = ".".join(module_parts)
        else:
            grpc_module_name = f"{__name__}_pb2_grpc"

        try:
            grpc_mod = importlib.import_module(grpc_module_name)
        except ImportError as e:
            error_msg = (
                f"Failed to import gRPC stub module '{grpc_module_name}'. "
                f"Make sure you generated the gRPC stubs using: "
                f"python -m grpc_tools.protoc --grpc_python_out=. yourfile.proto"
            )
            raise ImportError(error_msg) from e

        try:
            stub_class = getattr(grpc_mod, "HaberdasherStub")  # noqa: B009
        except AttributeError as e:
            error_msg = (
                f"Could not find HaberdasherStub in '{grpc_module_name}'. "
                f"This usually means the proto file was not compiled with gRPC support."
            )
            raise AttributeError(error_msg) from e

        stub = stub_class(transport._channel)  # noqa: SLF001
        return HaberdasherGrpcWrapper(stub)

    error_msg = f"Unsupported transport type: {type(transport)}"
    raise TypeError(error_msg)


def create_client_sync(
    transport: Any,  # Union[ConnectTransport, GrpcTransport]
) -> HaberdasherClientSyncProtocol:
    """Create a sync Haberdasher client with the specified transport.

    Args:
        transport: The transport to use (ConnectTransport or GrpcTransport)

    Returns:
        A client implementing HaberdasherClientSyncProtocol
    """
    # Avoid circular imports by importing here
    from connecpy.transport.client.connect import ConnectTransport  # noqa: PLC0415, I001
    from connecpy.transport.client.grpc import GrpcTransport  # noqa: PLC0415

    if isinstance(transport, ConnectTransport):
        return HaberdasherClientSync(
            address=transport.address,
            proto_json=transport.proto_json,
            accept_compression=transport.accept_compression,
            send_compression=transport.send_compression,
            timeout_ms=transport.timeout_ms,
            read_max_bytes=transport.read_max_bytes,
            interceptors=transport.interceptors,
            session=transport.session,
        )
    if isinstance(transport, GrpcTransport):
        # Import grpc stub
        module_parts = __name__.split(".")
        if module_parts[-1].endswith("_connecpy"):
            base_name = module_parts[-1][:-9]  # Remove "_connecpy"
            module_parts[-1] = f"{base_name}_pb2_grpc"
            grpc_module_name = ".".join(module_parts)
        else:
            grpc_module_name = f"{__name__}_pb2_grpc"

        try:
            grpc_mod = importlib.import_module(grpc_module_name)
        except ImportError as e:
            error_msg = (
                f"Failed to import gRPC stub module '{grpc_module_name}'. "
                f"Make sure you generated the gRPC stubs using: "
                f"python -m grpc_tools.protoc --grpc_python_out=. yourfile.proto"
            )
            raise ImportError(error_msg) from e

        try:
            stub_class = getattr(grpc_mod, "HaberdasherStub")  # noqa: B009
        except AttributeError as e:
            error_msg = (
                f"Could not find HaberdasherStub in '{grpc_module_name}'. "
                f"This usually means the proto file was not compiled with gRPC support."
            )
            raise AttributeError(error_msg) from e

        stub = stub_class(transport._channel)  # noqa: SLF001
        return HaberdasherGrpcWrapperSync(stub)

    error_msg = f"Unsupported transport type: {type(transport)}"
    raise TypeError(error_msg)
