# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: haberdasher.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

import google.protobuf.empty_pb2 as google_dot_protobuf_dot_empty__pb2

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import (
    ConnectASGIApplication,
    ConnectWSGIApplication,
    Endpoint,
    EndpointSync,
)

from . import haberdasher_pb2 as haberdasher__pb2


class Haberdasher(Protocol):
    async def make_hat(
        self, request: haberdasher__pb2.Size, ctx: RequestContext
    ) -> haberdasher__pb2.Hat:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def make_flexible_hat(
        self, request: AsyncIterator[haberdasher__pb2.Size], ctx: RequestContext
    ) -> haberdasher__pb2.Hat:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def make_similar_hats(
        self, request: haberdasher__pb2.Size, ctx: RequestContext
    ) -> AsyncIterator[haberdasher__pb2.Hat]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def make_various_hats(
        self, request: AsyncIterator[haberdasher__pb2.Size], ctx: RequestContext
    ) -> AsyncIterator[haberdasher__pb2.Hat]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def list_parts(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> AsyncIterator[haberdasher__pb2.Hat.Part]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def do_nothing(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherASGIApplication(ConnectASGIApplication):
    def __init__(
        self,
        service: Haberdasher,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.example.Haberdasher/MakeHat": Endpoint.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
                "/connectrpc.example.Haberdasher/MakeFlexibleHat": Endpoint.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_flexible_hat,
                ),
                "/connectrpc.example.Haberdasher/MakeSimilarHats": Endpoint.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_similar_hats,
                ),
                "/connectrpc.example.Haberdasher/MakeVariousHats": Endpoint.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_various_hats,
                ),
                "/connectrpc.example.Haberdasher/ListParts": Endpoint.server_stream(
                    method=MethodInfo(
                        name="ListParts",
                        service_name="connectrpc.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=haberdasher__pb2.Hat.Part,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_parts,
                ),
                "/connectrpc.example.Haberdasher/DoNothing": Endpoint.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="connectrpc.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.do_nothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.example.Haberdasher"


class HaberdasherClient(ConnectClient):
    async def make_hat(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__pb2.Hat:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    async def make_flexible_hat(
        self,
        request: AsyncIterator[haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> haberdasher__pb2.Hat:
        return await self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="MakeFlexibleHat",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_similar_hats(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[haberdasher__pb2.Hat]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="MakeSimilarHats",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_various_hats(
        self,
        request: AsyncIterator[haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[haberdasher__pb2.Hat]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="MakeVariousHats",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[haberdasher__pb2.Hat.Part]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ListParts",
                service_name="connectrpc.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DoNothing",
                service_name="connectrpc.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class HaberdasherSync(Protocol):
    def make_hat(
        self, request: haberdasher__pb2.Size, ctx: RequestContext
    ) -> haberdasher__pb2.Hat:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def make_flexible_hat(
        self, request: Iterator[haberdasher__pb2.Size], ctx: RequestContext
    ) -> haberdasher__pb2.Hat:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def make_similar_hats(
        self, request: haberdasher__pb2.Size, ctx: RequestContext
    ) -> Iterator[haberdasher__pb2.Hat]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def make_various_hats(
        self, request: Iterator[haberdasher__pb2.Size], ctx: RequestContext
    ) -> Iterator[haberdasher__pb2.Hat]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def list_parts(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> Iterator[haberdasher__pb2.Hat.Part]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def do_nothing(
        self, request: google_dot_protobuf_dot_empty__pb2.Empty, ctx: RequestContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class HaberdasherWSGIApplication(ConnectWSGIApplication):
    def __init__(
        self,
        service: HaberdasherSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.example.Haberdasher/MakeHat": EndpointSync.unary(
                    method=MethodInfo(
                        name="MakeHat",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_hat,
                ),
                "/connectrpc.example.Haberdasher/MakeFlexibleHat": EndpointSync.client_stream(
                    method=MethodInfo(
                        name="MakeFlexibleHat",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_flexible_hat,
                ),
                "/connectrpc.example.Haberdasher/MakeSimilarHats": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="MakeSimilarHats",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.make_similar_hats,
                ),
                "/connectrpc.example.Haberdasher/MakeVariousHats": EndpointSync.bidi_stream(
                    method=MethodInfo(
                        name="MakeVariousHats",
                        service_name="connectrpc.example.Haberdasher",
                        input=haberdasher__pb2.Size,
                        output=haberdasher__pb2.Hat,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.make_various_hats,
                ),
                "/connectrpc.example.Haberdasher/ListParts": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="ListParts",
                        service_name="connectrpc.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=haberdasher__pb2.Hat.Part,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_parts,
                ),
                "/connectrpc.example.Haberdasher/DoNothing": EndpointSync.unary(
                    method=MethodInfo(
                        name="DoNothing",
                        service_name="connectrpc.example.Haberdasher",
                        input=google_dot_protobuf_dot_empty__pb2.Empty,
                        output=google_dot_protobuf_dot_empty__pb2.Empty,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.do_nothing,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.example.Haberdasher"


class HaberdasherClientSync(ConnectClientSync):
    def make_hat(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> haberdasher__pb2.Hat:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="MakeHat",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )

    def make_flexible_hat(
        self,
        request: Iterator[haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> haberdasher__pb2.Hat:
        return self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="MakeFlexibleHat",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_similar_hats(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[haberdasher__pb2.Hat]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="MakeSimilarHats",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def make_various_hats(
        self,
        request: Iterator[haberdasher__pb2.Size],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[haberdasher__pb2.Hat]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="MakeVariousHats",
                service_name="connectrpc.example.Haberdasher",
                input=haberdasher__pb2.Size,
                output=haberdasher__pb2.Hat,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_parts(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[haberdasher__pb2.Hat.Part]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ListParts",
                service_name="connectrpc.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=haberdasher__pb2.Hat.Part,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def do_nothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DoNothing",
                service_name="connectrpc.example.Haberdasher",
                input=google_dot_protobuf_dot_empty__pb2.Empty,
                output=google_dot_protobuf_dot_empty__pb2.Empty,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
