// Copied from https://github.com/twitchtv/connecpy/blob/v5.10.2/example/service.proto
syntax = "proto3";

package i2y.connecpy.example;

import "google/protobuf/empty.proto";

option go_package = "example";

// A Hat is a piece of headwear made by a Haberdasher.
message Hat {
  // The size of a hat should always be in inches.
  int32 size = 1;

  // The color of a hat will never be 'invisible', but other than
  // that, anything is fair game.
  string color = 2;

  // The name of a hat is it's type. Like, 'bowler', or something.
  optional string name = 3;

  // A part within a Hat.
  message Part {
    // The ID of the part.
    string id = 1;
  }
}

// Size is passed when requesting a new hat to be made. It's always
// measured in inches.
message Size {
  int32 inches = 1;
  // Additional description or notes about the requested hat
  string description = 2;
}

// A Haberdasher makes hats for clients.
service Haberdasher {
  // MakeHat produces a hat of mysterious, randomly-selected color!
  rpc MakeHat(Size) returns (Hat) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // MakeFlexibleHats produces a single hat adhering to many sizes.
  rpc MakeFlexibleHat(stream Size) returns (Hat) {}

  // MakeSimilarHats produces hats of mysterious, randomly-selected color following a single order!
  rpc MakeSimilarHats(Size) returns (stream Hat) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // MakeVariousHats produces hats of mysterious, randomly-selected color following many orders!
  rpc MakeVariousHats(stream Size) returns (stream Hat) {}

  // ListParts lists available parts for making a hat.
  rpc ListParts(google.protobuf.Empty) returns (stream Hat.Part) {}

  rpc DoNothing(google.protobuf.Empty) returns (google.protobuf.Empty);
}
