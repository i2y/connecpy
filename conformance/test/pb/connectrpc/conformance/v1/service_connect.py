# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: connectrpc/conformance/v1/service.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import (
    ConnectASGIApplication,
    ConnectWSGIApplication,
    Endpoint,
    EndpointSync,
)

from . import service_pb2 as connectrpc_dot_conformance_dot_v1_dot_service__pb2


class ConformanceService(Protocol):
    async def unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def server_stream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        ctx: RequestContext,
    ) -> AsyncIterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse
    ]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def client_stream(
        self,
        request: AsyncIterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest
        ],
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def bidi_stream(
        self,
        request: AsyncIterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest
        ],
        ctx: RequestContext,
    ) -> AsyncIterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse
    ]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def idempotent_unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ConformanceServiceASGIApplication(ConnectASGIApplication):
    def __init__(
        self,
        service: ConformanceService,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.conformance.v1.ConformanceService/Unary": Endpoint.unary(
                    method=MethodInfo(
                        name="Unary",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unary,
                ),
                "/connectrpc.conformance.v1.ConformanceService/ServerStream": Endpoint.server_stream(
                    method=MethodInfo(
                        name="ServerStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.server_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/ClientStream": Endpoint.client_stream(
                    method=MethodInfo(
                        name="ClientStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.client_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/BidiStream": Endpoint.bidi_stream(
                    method=MethodInfo(
                        name="BidiStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.bidi_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/Unimplemented": Endpoint.unary(
                    method=MethodInfo(
                        name="Unimplemented",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unimplemented,
                ),
                "/connectrpc.conformance.v1.ConformanceService/IdempotentUnary": Endpoint.unary(
                    method=MethodInfo(
                        name="IdempotentUnary",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.idempotent_unary,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.conformance.v1.ConformanceService"


class ConformanceServiceClient(ConnectClient):
    async def unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Unary",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def server_stream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse
    ]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ServerStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def client_stream(
        self,
        request: AsyncIterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest
        ],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        return await self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="ClientStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def bidi_stream(
        self,
        request: AsyncIterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest
        ],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> AsyncIterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse
    ]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="BidiStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Unimplemented",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def idempotent_unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="IdempotentUnary",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )


class ConformanceServiceSync(Protocol):
    def unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def server_stream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        ctx: RequestContext,
    ) -> Iterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse
    ]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def client_stream(
        self,
        request: Iterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest
        ],
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def bidi_stream(
        self,
        request: Iterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest
        ],
        ctx: RequestContext,
    ) -> Iterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse
    ]:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    def idempotent_unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        ctx: RequestContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ConformanceServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(
        self,
        service: ConformanceServiceSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/connectrpc.conformance.v1.ConformanceService/Unary": EndpointSync.unary(
                    method=MethodInfo(
                        name="Unary",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unary,
                ),
                "/connectrpc.conformance.v1.ConformanceService/ServerStream": EndpointSync.server_stream(
                    method=MethodInfo(
                        name="ServerStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.server_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/ClientStream": EndpointSync.client_stream(
                    method=MethodInfo(
                        name="ClientStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.client_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/BidiStream": EndpointSync.bidi_stream(
                    method=MethodInfo(
                        name="BidiStream",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.bidi_stream,
                ),
                "/connectrpc.conformance.v1.ConformanceService/Unimplemented": EndpointSync.unary(
                    method=MethodInfo(
                        name="Unimplemented",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unimplemented,
                ),
                "/connectrpc.conformance.v1.ConformanceService/IdempotentUnary": EndpointSync.unary(
                    method=MethodInfo(
                        name="IdempotentUnary",
                        service_name="connectrpc.conformance.v1.ConformanceService",
                        input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                        output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                        idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
                    ),
                    function=service.idempotent_unary,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/connectrpc.conformance.v1.ConformanceService"


class ConformanceServiceClientSync(ConnectClientSync):
    def unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Unary",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def server_stream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse
    ]:
        return self.execute_server_stream(
            request=request,
            method=MethodInfo(
                name="ServerStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def client_stream(
        self,
        request: Iterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest
        ],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        return self.execute_client_stream(
            request=request,
            method=MethodInfo(
                name="ClientStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def bidi_stream(
        self,
        request: Iterator[
            connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest
        ],
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> Iterator[
        connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse
    ]:
        return self.execute_bidi_stream(
            request=request,
            method=MethodInfo(
                name="BidiStream",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Unimplemented",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def idempotent_unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
        use_get: bool = False,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="IdempotentUnary",
                service_name="connectrpc.conformance.v1.ConformanceService",
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
            use_get=use_get,
        )
